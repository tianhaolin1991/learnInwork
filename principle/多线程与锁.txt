## 原生锁
### volatile关键字的原理
1.由于多核计算机会将数据缓存到每个处理器的缓冲区中来提高速度,此时就可能会出现数据不一致的情况
2.为了保证数据一致性,每个处理器都有一个嗅探用于探测缓冲区的数据是否过期,如果过期则从内存中重新同步
3.volatile关键字在更新时,JVM会发送一条Lock前缀的指令,该指令将当前处理器的缓冲区写入内存并强制其他处理器来同步数据
4.同时volatile关键字禁止编译器对代码指令中对应的变量读写进行重排序
	volatile与单例模式->双检锁使用了volatile关键字,是因为对象在初始化过程中有3个步骤
		a.为变量分配内存空间
		b.调用构建函数初始化单例对象
		c.将变量指针指向分配的内存空间
	b/c在不使用volatile关键字时可能出现重排.导致获取到的是还未初始化完成的对象
### sychronized关键字
一、sychronized
二、锁升级过程
sychronize锁存放在java对象头中,对象头里面的Mark Word默认存储对象的hashcode、分代年龄和锁标记位
锁一共有4种状态,分别为无锁|偏向锁|轻量级锁|重量级锁
1.无锁(标志位为00,锁状态为0):此时被称为可偏向状态,所有对象被创建出来的时候锁的类型都为01
2.偏向锁(标志位01,锁状态为1):jdk 1.6引入
	所有对象被创建出来时锁标志位为01,锁状态为0,当线程执行到临界区(sychronize包裹住的代码块)时,会利用CAS操作将线程ID插入到mark word中,同时修改锁的状态为1
	偏向锁的获取:
		当一个线程访问同步代码块并获取锁的时候,会使用CAS操作在对象头和栈帧中的锁记录里存储锁偏向的线程ID
		以后线程再次进入和退出同步代码块时不需要CAS操作而只是简单的检测一下对象头中的Mark word里是否存储指向当前线程的偏向锁
		如果测试成功即获取锁,如果测试失败,则尝试使用CAS将对象头的偏向锁指向当前线程
	偏向锁的释放:
		偏向锁是十分轻量级的,线程不会主动释放偏向锁,需要等待其他的线程来竞争
		如果此时偏向锁指向的线程已经不处于活动状态,则将对象头设置成为无锁状态然后重新偏向竞争的线程
	锁膨胀:
		如果线程仍然活着,表示此时出现了锁竞争,偏向锁会被释放,并升级到轻量级锁
3.轻量级锁(标志位00):
	升级到轻量级锁时,Mark word中不再存储线程ID和锁状态,转而存储锁记录的指针,无锁状态的轻量级锁存放的是Displace Mark Word
	轻量级锁的获取:
		竞争锁的线程将锁象的Displace Mark Word(置换标记字)拷贝到自己的锁空间,并尝试使用CAS将锁对象头中的Mark Word替换为当前线程锁记录(Object Mark Word)的指针
		如果成功,则获取到锁,如果失败,则表示其他线程获取到锁,当前线程便尝试使用自旋来获取锁
	轻量级锁的释放:
		当临界区执行完成后,当前线程尝试使用CAS将Displace Mark Word换回到锁对象头中,完成解锁
		如果锁释放失败,则证明锁对象的Mark Word已经被替换掉了(升级为重量级锁)
	锁膨胀:
		等待线程自旋次数过多(10次),或者此时有更多的线程尝试竞争锁(也就是说有3个线程同时竞争),轻量级锁会膨胀会重量级锁
4.重量级锁(标志位10):
	重量级锁的Mark Word中存储的是Monitor对象的指针
	重量级锁的获取:
		重量级锁是java最基础的锁实现,将没有获得锁的线程进行阻塞
		重量级锁之所以重量级,是因为他通过内部的Monitor来实现,该实现依赖于操作系统,此时操作系统会从用户态转为内核态,相对来说比较消耗资源
	重量级锁的释放:
		重量级锁释放后,或notify一个新的线程来使用锁
5.思考:为什么要分为这三种状态?
	1)对象在创建的时候认为自己不会被多线程争夺,默认使用偏向锁,偏向锁非常轻量级只需要使用CAS操作即可完成加锁
	2)当有少量竞争的时候使用轻量级锁,这时候使用的是自旋,因为有的临界区内代码并不多,且竞争线程少,此时如果转为锁阻塞状态会得不偿失
	3)当有多个线程竞争锁或者一个线程等待过长时,轻量级锁的意义就不存在了,CPU可能长时间空转,此时不如将这些线程锁阻塞,让CPU时间片分配到真正活动的线程
三、线程的状态:
这些状态都是Java Thread类中的Enum值
1.NEW:线程还没有被启动过
2.RUNNABLE:可执行状态表示一个线程正在执行或者也可以是在等待其他资源
3.BLOCKED:锁阻塞状态表示一个线程正在等待一个monitor lock以进入临界区(sychroniezd)
4.WAITTING:等待状态表示该线程执行了以下方法之一:Object.wait(),Thread.join(),LockSupport.park()
5.TIMED WAITTING:同上(with time out),Thread.sleep(),LockSupport.parkNanos()
6.TERMINATTED:已经完成了运行.即将终止
四、线程通信中的状态变化
1.等待线程的范式
	sychroniezd(lock)//s1
		while(true)
			if(!flag)
				lock.wait(); //s2
			doSometing();//进入RUNNABLE状态
2.通知线程的范式
	sychroniezd(lock)//s3
		flag = true;
		lock.notify();//s4
		doSomethingElse();//s5
		结束,释放锁//s6
		
3.锁变化情况
s1:等待线程进入RUNNABLE状态,通知线程因为没有获取锁而进入BLOCKED状态
s2:等待线程进入WAITTING状态
s3:通知线程获取锁,进入RUNNABLE状态
s4:等待线程将被唤醒,进入RUNNABLE状态
s5:等待线程获取锁失败,进入BLOCKED状态
s6:等待线程获取锁,进入RUNNABLE状态

4.超时等待范式
  sychroniezd(lock)
     long future = System.currentTimeMillis() + mills;
	 long remaining = mills;
	 while((result == null) && remaining > 0){
		wailt(remaining);
		remaining = future - System.currentTimeMillis();
	 }
	 return result;

## 并发包:Java并发编程的艺术
一、如何减少上下文切换
1.无锁并发编程:多线程处理数据时,可以使用一些方法来避免使用锁,如将数据的ID按照哈希算法取模分段,不同的线程处理不同段的数据(ConcurrentHashMap的resize就使用了这种方式)
2.CAS算法
3.使用最少线程,避免创建不需要的线程
4.协程:在单线程里面实现多任务的调度,并在单线程里维持多个人物间切换

二、CAS实现原子操作的三大问题
1.ABA问题:CAS是先检查值有没有发生变化,如果没有发生变化就更新;如果在此过程中数据出现了从A到B,再从B到A的变化过程是检测不出来的;
		  可以通过版本号或者时间戳来解决.1.5开始JDK提供了AtomicStampedReference来解决ABA的问题
2.循环时间长开销大:如果CAS操作长时间不成功,会给CPU带来非常大的开销
3.只能保证一个共享变量的原子操作;可以将多个变量进行组合来解决这个问题

三、AQS:AbstractQueuedSynchronizer(抽象队列同步器)
1.什么是AQS
AQS是Java并发包提供的锁实现框架,AQS是基于FIFO(先入先出)队列的,AQS主要面向开发者(希望实现锁的人)
Lock是一个包装器,实际调用的是AQS的acquire/release...等类
2.模式
AQS提供了两种模式,独占模式和共享模式,模式的不同决定队列中下一个线程能否获取锁
同一个AQS的实现类只能支持一种模式(如何同时实现?见读写锁)
3.如何使用AQS(根据源码描述)
锁类需要使用一个内部类来实现AQS来实现锁功能,需要实现以下方法
1)tryAcquire:acqure方法会轮询调用tryAcquire方法,如果失败会让线程入队,有可能block线程
2)tryRelease:release方法会轮询调用这个方法,如果成功则会unblock队列头的thread
3)tryAcquireShared:与上面类似,但可能涉及级联信号
4)tryReleaseShared:与上面类似,但可能涉及级联信号
5)isHeldExclusively:
例子可以查看源码
注意:如果不实现这些方法.他们默认抛出UnsupportedOperationException
这些方法的实现必须实现自身的线程安全
4.ConditionObject类
ConditionObject类是AQS的内部类,它是Condition类的实现类,主要是用于支持实现类的独占的操作

5.AQS的实现原理
1)见Processon
2)铺垫:
AQS使用状态机来进行锁控制
0:表示当前没有锁
1:表示当前锁正在被占用

Node节点使用waitStatus来表明当前状态:
 1:CANCEL -- 非正常状态,后继节点在自旋时会跳过该节点,找到新的前驱.
-1:SIGNAL -- 正常状态,会通知后续节点unpark,对于后续节点来说,只有前驱节点为SIGNAL才可以放心park
-2:CONDITION -- 表示该Node正在某个Condition上等待,该Node会被转移到等待队列
-3:PROPGATE -- 传播,共享锁中使用到的状态,表示会将前驱的信号无条件的传递到后继
 0:INITIAL -- 初始化状态
2)独占锁:
acquire:
	a.尝试获取锁,如果获取成功,则将自己的线程放入到currentThread中,并将state变为1
	b.如果获取失败则创建一个Node(包含Thread),使用CAS将Node放入到同步队列中,并开始自旋(尝试将PreNode的waitState变为-1),成功后Locksupport.lock()
	c.接收到前驱unpark(此时前驱一定是Head节点)信号后,再次开始自旋,尝试获取锁,如果成功,则将自己设置为头节点,失败则尝试将前驱状态改为SIGNAL后再次park()
release:
	a.tryRelease
	b.如果成功,则将currentThread设置为null,将状态设置为0
	c.通知后继节点unpark
3)共享锁:https://blog.csdn.net/anlian523/article/details/106319294/
acquireShared:
	a.tryAcquireShared:尝试在共享模式下获取锁,尝试查询state是否允许share模式,如果允许(0最后一个共享锁,>0还有多个共享锁),则获取锁;如果不允许(-1)则进入同步队列等待
	b.如果获取失败则进入自旋(类似Acquire)
	c.接收到前驱的unpark,则会再次tryAcquire(),如果失败,则开始自旋(尝试将PreNode的waitState变为-1,成功后Locksupport.park())
											  如果成功,则会尝试传播共享锁
		**传播逻辑:
			是否需要向下传播 propagate > 0 || h == null || h.waitStatus < 0 ||(h = head) == null || h.waitStatus < 0: 
				propagate > 0则表示还有共享锁可用,可以向下传播
				head == null :有可能是为了防止空指针导致的异常
				head.waitStatus < 0: 判断head的状态是否小于0,因为propagate只能是>=0,=0时候不唤醒是因为没有更多的共享锁.
									 而head.waitStatus在正常情况下只能为0(在unpark后继节点时被设置为0),
									 有且只有其他方法调用了doReleaseShared()方法并且当前head刚好处于临界状态(unpark了后继,后继并未能变成head)才会=-3,
									 而又有可能因为后继节点获取锁失败又将其变为-1,所以判断<0
				(h=head) == null:防止空指针
				h.waitStatus < 0: 这种情况可能会造成不必要的唤醒,
releaseShared:
	tryRelease():如果成功->loop
		a.获取当前头结点,缓存在栈中
		b.如果当前头结点是Node.SIGNAL,则会尝试将其归0,变为中间状态,并unpark后继节点
		c.如果当前头节点状态为0,则证明已经unpark了后继节点,这时候将其变为Node.PROPGATE,为了提醒后继节点已经有公平锁释放了.见(acquireShared的waitStatus判断条件)
		d.如果在doRelease过程中head没有改变,则break.否则就要loop,因为当头节点发生了改变,说明Propagate的媒介已经改变为另外一个node了

6.重入锁
1)公平锁与非公平锁
公平锁:等待时间最长的线程优先获取   FairSync
非公平锁:非公平锁是指新的线程不会直接入队,而是先尝试获取锁 NoFairSync
在重入锁初始化时会选择策略,默认是NoFair的,因为非公平锁的效率普遍要高于非公平锁(因为非公平锁同一线程连续获取锁的几率很大,因为后继有状态切换的开销,所以非公平锁总体上的消耗比非公平锁小得多)
										  但是有可能引起饥饿(某个线程一直得不到锁)
synchronized是非公平锁
2)重入锁是如何实现重入
判断要进入锁的是否为当前线程,如果是status+1,release status-1,直到0释放锁
7.读写锁
1)读写状态的设计
读状态:status的高16位
写状态:status的低16位
2)写锁的获取与释放
写锁是一个支持重入的排他锁
锁获取:
	a. read count != 0 || (write count > 0 && owner != currentThread) false
	b. 锁饱和,获取失败
	c. 尝试使用cas获取锁
锁释放:与重入锁类似
3)读锁的获取与释放
4)锁降级
重入锁允许锁降级,也就是说在当前线程还未释放写锁的情况下获取读锁,再释放写锁,在完成读取后最后释放读锁
锁降级的目的是为了保证在其他线程写入前获取当前线程写入的数据

四、阻塞队列
1.什么是阻塞队列
阻塞队列是一个支持两个附加操作的队列
1)支持阻塞的插入方法:当队列满时,队列会阻塞插入元素的线程
2)支持阻塞的移除方法:当队列为空时,获取元素的线程会等待队列变为非空
2.常用方法
1)添加方法
void add(e):队列满时抛出异常
boolean offer(e):队列满时,返回false
void put(e):队列满时等待直到有足够的capacity
2)获取方法:
remove():当队列为空时,抛出异常
poll():队列为空时,返回null
take():队列为空时,等待新的元素放入
3.Java中的阻塞队列
1)ArrayBlockingQueue:一个由数组构成的有界阻塞队列
2)LinkedBlockingQueue:一个由链表组成的有界阻塞队列
3)PriorityBlockingQueue:支持优先级排序的无界阻塞队列
4)DelayQueue:DelayQueue是一个支持延时获取元素的无界阻塞队列
5)SynchronousQueue:一个不存储元素的阻塞队列 -> 一个传球手,其吞吐量高于LinkedBlockingQueue和ArrayBlockingQueue
6)LinkedTransferQueue:一个由链表结构组成的无界阻塞队列
7)LinkedBlockingDeque:一个由链表结构组成的双向阻塞队列

五、Fork/Join框架
1.什么是Fork/Join框架
Fork/Join框架是将大任务分解成为若干个小任务并行执行的框架,在某些小任务(提前)完成后还会通过工作窃取从其他小任务中获取任务
2.使用
1)创建任务
我们要使用ForkJoin框架，必须首先创建一个ForkJoin任务。它提供在任务中执行fork()和join()操作的机制。通常情况下，我们不需要直接继承ForkJoinTask类，只需要继承它的子类，Fork/Join框架提供了以下两个子类
a.RecursiveAction:用于没有返回结果的任务
b.RecursiveTask:用于有返回结果的任务
2)ForkJoinPool:ForkJoinTask需要通过ForkJoinPool来执行
任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。
当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。(工作窃取)
2)案例:计算1+2+3+4的结果
```
//分成两个子任务,子任务1负责1+2,子任务2负责3+4
import java.util.concurrent.RecursiveTask;
public class CountTask extends RecursiveTask<Integer> {
    private static final int THRESHOLD = 2;  // 阈值
    private int start;
    private int end;

    public CountTask(int start, int end) {
        this.start = start;
        this.end = end;
    }

    @Override
    protected Integer compute() {
        int sum = 0;
        // 如果任务足够小就计算任务
        boolean canCompute = (end - start) <= THRESHOLD;
        if (canCompute) {
            for (int i = start; i <= end; i++) {
                sum += i;
            }
        } else {
            // 如果任务大于阈值，就分裂成两个子任务计算
            int middle = (start + end) / 2;
            CountTask leftTask = new CountTask(start, middle);
            CountTask rightTask = new CountTask(middle + 1, end);
            // 执行子任务
            leftTask.fork();
            rightTask.fork();
            // 等待子任务执行完，并得到其结果
            int leftResult = leftTask.join();
            int rightResult = rightTask.join();
            // 合并子任务
            sum = leftResult + rightResult;
        }
        return sum;
    }
	
	public static void main(String[] args) {
        ForkJoinPool forkJoinPool = new ForkJoinPool();
        // 生成一个计算任务，负责计算1+2+3+4
        CountTask task = new CountTask(1, 4);
        // 执行一个任务
        Future<Integer> result = forkJoinPool.submit(task);
        try {
            System.out.println(result.get());
        } catch (InterruptedException e) {
        } catch (ExecutionException e) {
        }
    }
}
```
六、Java的并发工具
1.等待多线程完成的CountDownLatch
0)作用:CountDownLatch用于多线程等待其他线程完成操作
1)使用CountDownLatch:
初始化CountDownLatch时设定计数器
latch.countDown(),减少计数器值
latch.await():当前线程进入WAITING状态,直到计数器减到0
2)原理:
实现AQS接口,利用共享锁的传播特性
a)await:调用AQS的acquireShared方法,实现的tryAcquireShared的方法是判断getState是否为0
protected int tryAcquireShared(int acquires) {
      return (getState() == 0) ? 1 : -1;
}
b)countDown:调用AQS的releaseShared方法,实现的tryReleaseShared是尝试将计数器减一,返回设置后的state值是否为0(倒数是否完成)
3)特点
a)CountDownLatch可以用于多线程之间的计数也可以用于一个线程内多个步骤的计数
b)CountDownLatch的计数器是不可复用的
2.CyclicBarrier:同步屏障
0)作用:可循环使用的屏障,让一组线程达到屏障时被阻塞,直到达到一定的线程数再开始运行;
	   一般用于多个线程执行完之后,收集所有的执行结果
1)使用
```
//创建一个CyclicBarrier并指定其解锁之后的行为
//如果不需要后续操作可以不指定
//注意:barrier会使用最后await()时计数器为0的线程去执行该runnable
//	   执行完成之后,计数器会归零
CyclicBarrier barrier = new CyclicBarrier(10, () -> {
	System.out.println("执行CB内部线程");
	System.out.println(Thread.currentThread().getName());
});
ExecutorService executorService = Executors.newFixedThreadPool(2);
int i = 0;
while (i < 20) {
	i++;
	executorService.submit(() -> {
		doSomething();
		try {
			barrier.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (BrokenBarrierException e) {
			e.printStackTrace();
		}
	});
}
executorService.shutdown();
```
2)原理:直接使用重入锁
属性:parties->启动共需要的线程数
     count->启动还需要的线程数,初始值=parties-
     runCommand->传入的runnable接口,用于执行postProcess
	 generation->用于标识barrier的使用,如果barrier正常完成后会创建一个新的generation.如果非正常,会打破当前的generation并唤醒其他所有线程阻塞在trip上的线程
	 trip->Condition对象,用于阻塞当前线程
await():
	加锁
		count-- == 0 ?
		true : 执行command.run(),成功则新建generation,并唤醒其他所有线程;否则打破generation,并唤醒其他所有线程
		false: 循环,在trip上阻塞,直到被唤醒(可能是trip后唤醒,也可能是打破唤醒)
	解锁
打破:
	当有线程等待超时/被中断/有线程执行了reset()方法/runCommand抛出异常都会将当前的Generation设置为broken状态并唤醒等待在trip上的所有线程
	被唤醒的线程会查看自己的generation情况(generation会在进入时缓存到当前线程)
		g.isBroken == true -> 抛出异常,说明当前barrier被中断了
		g != this.generation -> 继续执行,说明是正确的被trip
3)CyclicBarrier和CountDownLatch的区别
a)CyclicBarrier的计数器可以重用,并且可以使用reset()去重置,所以它可以处理更为复杂的场景
3.Semapheore:信号量,用于流量控制
0)作用:限制资源使用
1)原理:AQS,共享锁,支持公平与非公平形式,通过成员变量控制可以执行的线程数
2)例子
```
//每次最多允许10个线程执行
public class SemaphoreTest {
    private static final int THREAD_COUNT = 30;
    private static ExecutorService threadPool = Executors.newFixedThreadPool(THREAD_COUNT);
    private static Semaphore s = new Semaphore(10);
    public static void main(String[] args) {
        for (int i = 0; i< THREAD_COUNT; i++) {
            threadPool.execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        s.acquire();
                        System.out.println("save data");
                        s.release();
                    } catch (InterruptedException e) {
                    }
                }
            });
        }
        threadPool.shutdown();
    }
}
```


七、线程池

1.线程池工作流程
1)如果核心线程池没满,则创建一个新的Worker来执行任务
2)如果核心线程满了,则将新的任务放入到等待队列
3)如果等待队列满了,工作线程未达到最大线程,则创建新的工作线程
4)如果当前线程池已达到最大工作线程,则启动决绝策略

2.线程池原理
1)线程池的状态:
线程池的状态由ctl(control)变量来保证,其高两位是线程池的状态,低29位为Worker的数量
a)线程池的状态
状态列表
	RUNNING: 接受新的tasks并且执行队列中的tasks
	SHUTDOWN: 不接受新的tasks,但仍执行队列中的tasks
	STOP: 不接受新的tasks,不执行队列中的tasks,并且中断正在执行的任务
	TIDYING: 所有的任务都停止了,workerCount变为0,即将执行terminated hook method.是一个中间状态.在STOP完成之后,TERMINATED完成之前
	TERMINATED: terminated()完成
状态转换
	RUNNING -> SHUTDOWN:   			执行executor.shutdown()
	(RUNNING OR SHUTDOWN) -> STOP:  执行executor.shutdownNow()
	SHUTDOWN -> TIDYING:			队列和线程池都为空
	STOP -> TIDYING:				线程池为空
	TIDYING -> TERMINATED:			terminated()执行完成之后
b)workerCount
work count是指已开启的且未停止的线程,它与实际活动线程数可能在短暂的时间内存在区别

2)Worker
Worker是线程池中的实际工作类,它是AQS的实现类并继承了runnable接口
Worker中维护着一个线程,用于执行RunnableCommand
Worker会一直尝试获取task(循环),并执行,直到keepAliveTime到时或者RunnableCommand执行出错
	如果正常退出,则会去看是否需要再重新放入一个worker => 当worker小于最小值(core)
	如果非正常退出,则一定会放入一个新的Worker
总结:正常情况下core threads是不会改变的,除非出现过收缩或者抛出过异常

八、线程池框架

